1. Python 有个 build-in 的函数，叫 id(),能返回一个对象的内存地址，以十进制的形式。
以下是 Python 2.7 官方文档里对 id() 的描述，它确实返回的是内存地址。（Python 3.3 文档也看了，描述一样）
id(object) 
Return the “identity” of an object. This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime.
Two objects with non-overlapping lifetimes may have the same id() value.
CPython implementation detail: This is the address of the object in memory.

2. 正题。
python 里任何类型的变量都是引用，包括基本型的变量，比如int、float；也包括复杂型的变量，比如list、dict。
而在 C/C++ 和 Java 里，基本数据类型的变量不是引用，复杂的才是。具体什么是复杂，C/C++ 和 Java 是有区别的。
具体看下面的例子。
例1.1，基本数据类型
python：
>>> n = 1
>>> id(n)
>>> n = 2
>>> id(n)
n被重新赋值后，其所在的内存地址发生了变化。
C/C++:
int n =1;
printf("0x%x",&n);
n=2;
printf("0x%x",&n);
n被重新赋值后，其所在的内存地址没有变化，只是这个地址里存放的值发生了变化。
对于以上例子， Java 的内存使用情况跟 C/C++ 一样。

“n是什么”和“n在哪”。
无论哪种语言，n都是一个整数。当n=1时，n就是1，当n=2时，n就是2。
区别在于n在哪。对于python，n=1时，n跟对象1在内存的同一个地方，当n=2时，n跟对象2在内存的同一个地方。
对于C/C++/Java，n=1时，n在栈空间某个地址上，n=2的时候，n还在栈空间的这个地址上。

例1.2，基本数据类型
python：
>>> n1=1
>>> n2=2
>>> id(n1)
38843208
>>> id(n2)
38843196
>>> n1=n2
>>> id(n1)
38843196
C/C++/Java，n1=n2 之后，n1的地址不变。

例1.3，基本数据类型作为函数的参数
python：
def add_one(a):
    print("id(a)={id_a}".format(id_a=id(a)))
    a+=1
	print("id(a)={id_a}".format(id_a=id(a)))
	return a
n=1
print("id(n)={id_n1}".format(id_n=id(n)))
add_one(n)
print("id(n)={id_n1}".format(id_n=id(n)))
运行结果：
id(n)=39335424
id(a)=39335424
id(a)=39335412
id(n)=39335424

C/C++:
int add_one(int a)
{
	printf("&a=0x%x \n",&a);
	return ++a;
}
void main()
{
	int n=1;
	printf("&n=0x%x \n",&n);
	add_one(n);
	system("pause");
}
运行结果：
&n=0x2dfcf8
&a=0x2dfc24

C/C++ 可以用引用传递实现改变参数的值，即便参数是基本数据类型
void change_int(int* a)
{
	++*a;
}

int _tmain(int argc, _TCHAR* argv[])
{
	int n=1;
	printf("%d\n",n);
	change_int(&n);
	printf("%d\n",n);
	system("pause");
	return 0;
}

思考题，Python 和 Java 分别怎么实现上面的例子？
思考了半天，好像 Python 是不行的，Java 没怎么思考，估计也不行。
实现了也没啥意义，不想了。



例二，字符串
>>> s1="abc"
>>> s2="def"
>>> id(s1)
35633776
>>> id(s2)
41726944
>>>
>>> s1=s1+"Z"
>>> id(s1)
41730336
>>> s1
'abcZ'
>>>

def change_str(s):
	s=s+'Z'
	return s
str1 = "abc"
str2 = change_str(str1)
print(str1)
print(str2)
